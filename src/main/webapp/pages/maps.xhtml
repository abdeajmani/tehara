<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:p="http://primefaces.org/ui">
<h:head>
	<link rel="stylesheet"
		href="https://openlayers.org/en/v4.6.4/css/ol.css" type="text/css" />
    <link rel="stylesheet"
		href="/css/maps.css" type="text/css" />
	<script src="https://openlayers.org/en/v4.6.4/build/ol-debug.js" type="text/javascript"></script>
	<!--<script src="https://openlayers.org/en/v4.6.4/build/ol-debug.js"
		type="text/javascript"></script>-->
	<title>Map</title>
</h:head>
<h:body>
	<f:metadata>
		<f:viewParam name="countryName" value="#{airportView.countryName}" />
	</f:metadata>
	<h2>Map</h2>
	<div id="map" class="map">
	</div>
	<div id="popup" class="ol-popup">
     		<a href="#" id="popup-closer" class="ol-popup-closer"></a>
     		<div id="popup-content"></div>
   	</div>
	
	<h:outputScript>
	
	/**
     * Elements that make up the popup.
     */
    var container = document.getElementById('popup');
    var content = document.getElementById('popup-content');
    var closer = document.getElementById('popup-closer');


    /**
     * Create an overlay to anchor the popup to the map.
     */
    var overlay = new ol.Overlay({
      element: container,
      autoPan: true,
      autoPanAnimation: {
        duration: 250
      }
     });
     
      /**
       * Add a click handler to hide the popup.
       * @return {boolean} Don't follow the href.
       */
      closer.onclick = function() {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
      };
	
      
      var vectorLayerfeatures = [];
	  var airportFeature;
	  var iconStyle = new ol.style.Style({
		        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
		          anchor: [0,0],
		          //icon made by www.flaticon.com
		          src: '/images/airplane32.png'
		        }))
		      });
      <p:repeat var="airport" value="#{airportView.airports}" >
      		airportFeature = new ol.Feature({
	   	 			geometry: new ol.geom.Point(ol.proj.fromLonLat([#{airport.longitude},#{airport.latitude}])),
	   	 			name: "#{airport.name}",
	   	 			icao: "#{airport.icao}" ,
	   	 			airportid : "#{airport.airportId}" 
	   	 			});
	   	 	airportFeature.setStyle(iconStyle);
	   	 	vectorLayerfeatures.push(airportFeature);
   	  </p:repeat>
     
      var vectorLayer = new ol.layer.Vector ({
      	source: new ol.source.Vector ({
      		features: vectorLayerfeatures      				
      	})
      });
      
       
      var map = new ol.Map({
	   	controls: ol.control.defaults().extend([
	    	new ol.control.FullScreen(),
	    	new ol.control.ScaleLine(),
	    	new ol.control.Zoom()
	    ]),
        target: 'map',
        layers: [
          new ol.layer.Tile({
            source: new ol.source.OSM()
          }),
          vectorLayer          
        ],
        overlays: [ overlay ],
        view: new ol.View({
          //center: ol.proj.fromLonLat([3.439496,50.449152]),
          center: ol.proj.fromLonLat([4.46027994156,51.1893997192]),
          zoom: 8
          })
      });
      
      /**
       * Add a click handler to the map to render the popup.
       */
      map.on('singleclick', function(evt) {
        var coordinate = evt.coordinate;
        var feature = map.forEachFeatureAtPixel(evt.pixel,
            function(feature) {
              return feature;
            }, {hitTolerance: 5});
        
        if(feature){
	        content.innerHTML = '<p>Airport:</p><code>' + feature.get('name') + ' - ' +
	        feature.get('icao') +  '</code>';
	        overlay.setPosition(coordinate);
      	}
      });
      
    </h:outputScript>
</h:body>
</html>